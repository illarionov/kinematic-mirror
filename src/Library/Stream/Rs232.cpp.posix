// TODO: How to detect timeouts and framing errors?

#include "Rs232.h"
#include <termios.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <fcntl.h>




Rs232::Rs232(const char* name)
{
	ErrCode = Open(name);
	if (ErrCode != OK)
		Close();
}

Rs232::~Rs232()
{
	Close();
}


bool Rs232::Open(const char* name)
{
	bool status = OK;

        // Save the name for error messages
        strncpy(Name, name, sizeof(Name));
        Name[sizeof(Name)-1] = '\0';

	// Open the serial port. Non-blocking to ignore control lines.
	Handle = ::open(name, O_RDWR | O_NOCTTY | O_NDELAY);
        if (Handle == -1)
		return SysError("Unable to open serial port %s\n", name);

	// Immediately restore blocking mode. 
	if (fcntl(Handle, F_SETFL, 0) == -1)
  		status = SysError("Can't restore blocking mode (%s)\n",name);

	// Flush the output queue.
        Flush();

       	// Get the current port configuration
       	struct termios config;
	if (tcgetattr(Handle, &config) == -1)
		status = SysError("Unable to get configuration for %s\n", name);

	// Configure the port to raw mode, but don't change the baud rate
	speed_t iBaud = cfgetispeed(&config);
        speed_t oBaud = cfgetospeed(&config);
        bzero(&config, sizeof(config));
	config.c_cflag = CS8 | CREAD | CLOCAL;
	config.c_cc[VMIN] = 1;
	config.c_cc[VTIME] = 0;
        cfsetispeed(&config, iBaud);
        cfsetospeed(&config, oBaud);

        // Set the port configuration
	if (tcsetattr(Handle, TCSADRAIN, &config) == -1)
		status = SysError("Unable to put in raw mode for %s\n", name);

	// Flush the input queue
        Flush();

        // Raise the control lines if any
        int lines = -1;  // All the control lines, hopefully not EINVAL
        if (ioctl(Handle, TIOCMSET, &lines) == -1)
		status = SysError("Can't set control lines: %s\n", name);
     
	if (status != OK)
		Close();

	return status;
}



void Rs232::Close()
{
	close(Handle);
	Handle = -1;
}



bool Rs232::Read(byte* buf, size_t count, size_t& actual)
{
	debug(9, "Rs232::Read: count=%d\n", count);
	actual = ::read(Handle, buf, count);
	if (actual == -1)
		return SysError("Couldn't read serial bytes\n");

	for (size_t i = 0; i < actual; i++)
		debug(9," %02x(%c) ", buf[i], buf[i]);
	debug(9, "\n");

	
	return OK;
}



bool Rs232::Write(const byte* buf, size_t len)
{
	debug(9, "Write: len=%d  buf=", len);
	for (size_t i = 0; i < len; i++)
		debug(9," %02x(%c) ", buf[i], buf[i]);
	debug(9, "\n");

        int actual = ::write(Handle, buf, len);
	if (actual == -1 || len != actual)
		return SysError("Unable to write to com port\n");

	return OK;
}



static struct {int baud; speed_t speed;} BaudRates[] =
    { {50, B50}, {75, B75}, {110,B110},{134,B134}, {150,B150}, {200,B200},
      {300,B300}, {600,B600}, {1200,B1200}, {1800,B1800}, {2400,B2400},
      {4800,B4800}, {9600,B9600}, {19200,B19200}, {38400,B38400},
      {57600,B57600}, {921600,B921600}, {1000000,B1000000},
      {1152000,B1152000}, {1500000,B1500000}, {2000000,B2000000}, 
      {2500000,B2500000}, {3000000,B3000000},
#ifdef B3500000
     {3500000,B3500000},
#endif
#ifdef B4000000
      {4000000,B4000000}, 
#endif
      {0,B0} };

static int SpeedToBaud(speed_t Speed)
{
    int i;
    for (i=0; BaudRates[i].baud != 0; i++)
        if (BaudRates[i].speed == Speed) break;
    return BaudRates[i].baud;
}

static speed_t BaudToSpeed(int Baud)
{
    int i;
    for (i=0; BaudRates[i].baud != 0; i++)
        if (BaudRates[i].baud == Baud) break;
    return BaudRates[i].speed;
}


bool Rs232::SetBaud(int baud)
{
	debug("SetBaud: baud=%d\n", baud);

        // Wait for data to be sent first
        Sleep(100);
        tcdrain(Handle);

       	// Get the current port configuration
       	struct termios config;
	if (tcgetattr(Handle, &config) == -1)
		return SysError("Unable to get configuration for %s\n", Name);

        // Set the baud rates 
        cfsetispeed(&config, BaudToSpeed(baud));
        cfsetospeed(&config, BaudToSpeed(baud));

        // Set the port configuration
	if (tcsetattr(Handle, TCSADRAIN, &config) == -1)
		return SysError("Unable to put in raw mode for %s\n", Name);

	return OK;
}


bool Rs232::GetBaud(int& baud)
{
       	// Get the current port configuration
       	struct termios config;
	if (tcgetattr(Handle, &config) == -1)
		return SysError("Unable to get configuration for %s\n", Name);

	baud = SpeedToBaud(cfgetispeed(&config));

	debug("GetBaud - baud=%d\n", baud);
	return OK;
}


bool Rs232::SetFraming(int32 DataBits, int32 Parity, int32 StopBits)
{
	debug("SetFraming: DataBits=%d Parity=%d StopBits=%d\n",
		               DataBits, Parity, StopBits);


       	// Get the current port configuration
       	struct termios config;
	if (tcgetattr(Handle, &config) == -1)
		return SysError("Unable to get configuration for %s\n", Name);

        int cflag = config.c_cflag & ~(CSIZE | PARENB | PARODD | CSTOPB);
        if (DataBits == 6)   cflag |= CS6;
        else if (DataBits == 7) cflag |= CS7;
        else if (DataBits == 8) cflag |= CS8;
        else                    cflag |= config.c_cflag & CSIZE;

        if (Parity == 0)     ;
        else if (Parity == 1)   cflag |= PARENB|PARODD;
        else if (Parity == 2)   cflag |= PARENB;
        else                    cflag |= config.c_cflag & (PARENB|PARODD);
        
        if (StopBits == 1)     ;
        else if (StopBits == 2)   cflag |= CSTOPB;
        else                      cflag |= config.c_cflag & CSTOPB;

        // Set the port configuration
	config.c_cflag = cflag;
	if (tcsetattr(Handle, TCSADRAIN, &config) == -1)
		return SysError("Unable to put in raw mode for %s\n", Name);

	// Flush the input queue
        Flush();

	return OK;
}


bool Rs232::SetTimeout(int msec)
{

       	// Get the current port configuration
       	struct termios config;
	if (tcgetattr(Handle, &config) == -1)
		return SysError("Unable to get configuration for %s\n", Name);

	// if no timeout, then read at least one character
        if (msec == 0) {
             config.c_cc[VMIN] = 1;
             config.c_cc[VTIME] = 0;

        // otherwise, set a timeout and read at least one character
        } else {
	    config.c_cc[VMIN] = 0;
            config.c_cc[VTIME] = max(1, min(255, (msec+50)/100));
        }

        // Set the port configuration
	if (tcsetattr(Handle, TCSADRAIN, &config) == -1)
		return SysError("Unable to put in raw mode for %s\n", Name);
	return OK;
}



bool Rs232::GetTimeout(int& msec)
{
       	// Get the current port configuration
       	struct termios config;
	if (tcgetattr(Handle, &config) == -1)
		return SysError("Unable to get configuration for %s\n", Name);

        msec = config.c_cc[VTIME] * 100;
	return OK;
}


bool Rs232::Flush()
{
	// Flush the input queue
        Sleep(100);
        tcdrain(Handle);
	if (tcflush(Handle, TCIOFLUSH) == -1)
		return SysError("Unable to flush serial port %s\n", Name);

    return OK;
}



bool Rs232::Purge()
{
	// Getting a complete purge of the input buffer is essential
	//  to recovering from errors and changing the baud rate.
	debug(5, "Rs232::Purge\n");
        Flush();

	// Some USB-RS232 adapters don't clear their remote buffers.
	// Consequently, we may still have bad characters sitting in
	// the remote input buffer.
	
	// Set a short time out
	int timeout;
	if (GetTimeout(timeout)) return Error();
	if (SetTimeout(10) != OK) return Error();

	// repeat until the buffers are empty 
	bool ErrCode;
	for (int i=0; i<100; i++) {
	
		// Read a buffer. If partial buffer, done
		byte buffer[1]; size_t actual;
		ErrCode = Read(buffer, sizeof(buffer), actual);
		if (ErrCode != OK || actual == 0) break;
	}

	if (SetTimeout(timeout) != OK) return Error();
	return OK;
}

int Rs232::FindBaudRate(const char* query, const char* response, int* BaudRates)
{
    // Save the current timeout
	int timeout;
	if (GetTimeout(timeout) != OK) return 0;

    // Set the Timeout to 2 seconds  
	if (SetTimeout(2000) != OK) return 0;

	// Query the current baud rate
	int baud;
	if (GetBaud(baud) != OK) return 0;

	// If the current baud is reasonable, try at the current baud rate 
	if (baud >= 9600 && QueryResponse(query, response, 1000) == OK) goto done;

	// repeat for each baud rate until success
	int i;
	for (i=0; BaudRates[i] > 0; i++) {

		// We're starting clean with respect to errors (don't want to accumulate)
		ClearError();

		// Set the baud rate, and query the device.
		if (BaudRates[i] != baud 
			&& this->SetBaud(BaudRates[i]) == OK
			&& QueryResponse(query, response, 1000) == OK) 
			break;
	}
	baud = BaudRates[i];

done:
	// Restore the original timeout value
	if (SetTimeout(timeout) != OK) return Error();

	// Return the baud rate we found, zero if none.
	return baud;
}

   
void Rs232::ClearErrors()
{
}

